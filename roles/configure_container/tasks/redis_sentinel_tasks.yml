- name: Find alive IP
  wait_for:
    host: "{{ wait_for_host_item }}"
    port: "{{ redis_sentinel_port }}"
    timeout: 5
  with_items:
    - "{{ groups[application_group_name] }}"
  loop_control:
    loop_var: wait_for_host_item
  delegate_to: 127.0.0.1
  register: alive_check
  ignore_errors: yes

- name: Determine alive node
  set_fact:
    alive_redis_node: "{{ (alive_check_item.wait_for_host_item is defined | ternary(alive_check_item.wait_for_host_item, redis_node_a)) }}"
  with_items: "{{ alive_check.results }}"
  loop_control:
    loop_var: alive_check_item

- name: "Check that /docker/{{ container_name }}/{{ config_filename }} exists"
  stat:
    path: "/docker/{{ container_name }}/{{ config_filename }}"
  register: stat_result

- name: Determine redis sentinel master
  shell: "redis-cli -h {{ alive_redis_node }} -p {{ redis_sentinel_port }} SENTINEL get-master-addr-by-name {{ redis_sentinel_master_set_name }}"
  register: sentinel_master
  ignore_errors: yes

- name: debug sentinel_master
  debug:
    msg: "{{ sentinel_master.stdout_lines[0] }}"
  when: sentinel_master.stdout_lines[0] is defined

- name: "Set redis_master_host and configure_container"
  set_fact:
    configure_container: "{{ (sentinel_master.stdout_lines[0] is defined | ternary(False, True)) if stat_result.stat.exists else True }}"
    redis_master_host: "{{ sentinel_master.stdout_lines[0] is defined | ternary(sentinel_master.stdout_lines[0], redis_node_a) }}"

- name: "redis_master_host has been set to {{ redis_master_host }}"
  debug:
    msg: "{{ redis_master_host }}"
